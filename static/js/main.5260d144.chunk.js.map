{"version":3,"sources":["components/Start.js","components/End.js","components/Question.js","App.js","serviceWorker.js","index.js"],"names":["Start","props","onClick","stlye","style","color","background","marginRight","marginLeft","marginTop","fontSize","End","totalTime","numQuestions","Question","question","answers","isLast","onLastClick","map","answer","key","App","useState","questionNumber","setQuestionNumber","Date","startTime","setStartTime","endTime","setEndTime","showQuestion","done","setDone","questions","totalSeconds","minutes","Math","floor","seconds","className","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mLA4BeA,MAzBf,SAAeC,GAAQ,IACXC,EAAYD,EAAZC,QACR,OAAO,yBACCC,MAAO,IAGP,4BACAC,MAAO,CACHC,MAAO,QACPC,WAAY,MACZC,YAAa,OACbC,WAAY,OACZC,UAAW,MACXC,SAAU,IAEdR,QAASA,GATT,iBCKGS,MAXf,SAAaV,GAAQ,IAETW,EAA4BX,EAA5BW,UAAWC,EAAiBZ,EAAjBY,aAEnB,OAAQ,6BACJ,+CADI,IACqBD,EACzB,6BACA,kEAHI,IAGwCC,ICOrCC,MAdf,SAAkBb,GAAQ,IAEdc,EAAoDd,EAApDc,SAAUC,EAA0Cf,EAA1Ce,QAASd,EAAiCD,EAAjCC,QAASe,EAAwBhB,EAAxBgB,OAAQC,EAAgBjB,EAAhBiB,YAE5C,OAAO,6BACH,2BAAIH,GAEHC,EAAQG,KAAI,SAAAC,GAAM,OAAI,yBAAKC,IAAKD,GAAQ,4BAAQlB,QAAS,WAAQA,IAAee,GAAUC,MAAqBE,S,YCiEzGE,MAnEf,WAAgB,IAAD,EAE+BC,oBAAU,GAFzC,mBAENC,EAFM,KAEUC,EAFV,OAGqBF,mBAAS,IAAIG,MAHlC,mBAGNC,EAHM,KAGKC,EAHL,OAIiBL,mBAAS,IAAIG,MAJ9B,mBAING,EAJM,KAIGC,EAJH,OAK2BP,oBAAS,GALpC,mBAKNQ,EALM,aAMWR,oBAAS,IANpB,mBAMNS,EANM,KAMAC,EANA,KAQPC,EAAY,CAChB,CACEnB,SAAU,4CACVC,QAAS,CACP,iBACA,WACA,YACA,gBAGJ,CACED,SAAU,uBACVC,QAAS,CACP,MACA,OAGJ,CACED,SAAU,uCACVC,QAAS,CACP,MACA,QAMAmB,GAAgBN,EAAUF,GAAa,IAEvCS,EAAUC,KAAKC,MAAMH,EAAe,IACpCI,EAAWJ,EAAyB,GAAVC,EAEhC,OACE,yBAAKI,UAAU,OACb,+CACqB,IAApBhB,EAAwB,kBAAC,EAAD,CAAOtB,QAAS,WAAQuB,EAAkBD,EAAiB,GAAII,EAAa,IAAIF,SAAuB,KAE/HF,GAAkB,GAAKA,EAAiBU,EAAUO,QAAUV,IAAiBC,EAC5E,6BACA,kBAAC,EAAD,CAAUjB,SAAUmB,EAAUV,GAAgBT,SAAUC,QAASkB,EAAUV,GAAgBR,QAASC,OAAQO,EAAiB,IAAMU,EAAUO,OAAQvB,YAAa,kBAAMY,EAAW,IAAIJ,OAASxB,QAAS,kBAAMuB,EAAkBD,EAAiB,MAElP,6BACA,6BACA,4BAAQpB,MAAO,CAACE,WAAY,MAAOD,MAAO,SAAUH,QAAS,WAAO+B,GAAQ,GAAOH,EAAW,IAAIJ,QAAlG,+BAGG,KAIHF,GAAkBU,EAAUO,QAAUT,EAAO,kBAAC,EAAD,CAAKpB,UAAS,UAAKwB,EAAL,wBAA4BG,EAA5B,YAA+C1B,aAAcW,IAA0B,OCtDtIkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5260d144.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Start(props) {\n    const { onClick } = props;\n    return <div\n            stlye={{\n            }}\n        >\n            <button\n            style={{\n                color: 'white',\n                background: 'red',\n                marginRight: 'auto',\n                marginLeft: 'auto',\n                marginTop: '50%',\n                fontSize: 40\n            }}\n            onClick={onClick}\n        >\n            START QUIZ!\n        </button>\n    </div>\n    \n\n}\n\n\nexport default Start;","import React from 'react';\n\n\nfunction End(props) {\n\n    const { totalTime, numQuestions } = props;\n\n    return (<div>\n        <b>Total time take:</b> {totalTime}\n        <br></br>\n        <b>Total number of questions answered:</b> {numQuestions}\n    </div>);\n}\n\nexport default End;","import React from 'react';\n\n\nfunction Question(props) {\n\n    const { question, answers, onClick, isLast, onLastClick } = props;\n\n    return <div>\n        <p>{question}</p>\n\n        {answers.map(answer => <div key={answer}><button onClick={() => { onClick(); if (isLast) { onLastClick(); } }}>{answer}</button></div>)}\n    \n    </div>\n\n}\n\n\nexport default Question;","import React, { useState } from 'react';\nimport Start from './components/Start';\nimport End from './components/End';\nimport Question from './components/Question';\nimport './App.css';\nimport { start } from 'pretty-error';\n\n\nfunction App() {\n\n  const [questionNumber, setQuestionNumber] = useState(-1);\n  const [startTime, setStartTime] = useState(new Date());\n  const [endTime, setEndTime] = useState(new Date());\n  const [showQuestion, setShowQuestion] = useState(true);\n  const [done, setDone] = useState(false);\n\n  const questions = [\n    {\n      question: \"Where Do You Like To Go When You Eat Out?\",\n      answers: [\n        \"Pollo Tropical\",\n        \"Chipotle\",\n        \"McDonalds\",\n        \"Chick-fil-a\"\n      ]\n    },\n    {\n      question: \"Do You Like To Cook?\",\n      answers: [\n        \"Yes\",\n        \"No\"\n      ]\n    },\n    {\n      question: \"Could You Live Without The Internet?\",\n      answers: [\n        \"Yes\",\n        \"No\"\n      ]\n    }\n  ];\n\n\n  const totalSeconds = (endTime - startTime) / 1000;\n\n  const minutes = Math.floor(totalSeconds / 60);\n  const seconds = (totalSeconds - minutes * 60);\n\n  return (\n    <div className=\"App\">\n      <h1>YOUR PATH QUIZ</h1>\n      {questionNumber === -1 ? <Start onClick={() => { setQuestionNumber(questionNumber + 1); setStartTime(new Date()); } }></Start>: null}\n\n      {questionNumber >= 0 && questionNumber < questions.length && showQuestion && !done ?\n        <div>\n        <Question question={questions[questionNumber].question} answers={questions[questionNumber].answers} isLast={questionNumber + 1 === questions.length} onLastClick={() => setEndTime(new Date())} onClick={() => setQuestionNumber(questionNumber + 1)}>\n        </Question>\n        <br></br>\n        <br></br>\n        <button style={{background: 'red', color: 'white'}} onClick={() => {setDone(true); setEndTime(new Date())}}>Forget it, I quit the quiz</button>\n\n        </div>\n         : null\n      }\n\n      {\n        questionNumber >= questions.length || done ? <End totalTime={`${minutes} mintues and ${seconds} seconds`} numQuestions={questionNumber} ></End> : null\n      }\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}