{"version":3,"sources":["components/Start.js","components/End.js","components/Question.js","App.js","serviceWorker.js","index.js"],"names":["Start","props","onClick","stlye","style","color","background","marginRight","marginLeft","marginTop","fontSize","End","totalTime","numQuestions","startQuestion","Question","question","answers","isLast","onLastClick","map","answer","key","App","useState","questionNumber","setQuestionNumber","Date","startTime","setStartTime","endTime","setEndTime","showQuestion","done","setDone","showSpinner","setShowSpinner","Math","floor","random","questions","statements","totalSeconds","minutes","seconds","now","length","className","ProgressBar","label","setTimeout","Spinner","animation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.834a7e12.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Start(props) {\n    const { onClick } = props;\n    return <div\n            stlye={{\n            }}\n        >\n            <button\n            style={{\n                color: 'white',\n                background: 'red',\n                marginRight: 'auto',\n                marginLeft: 'auto',\n                marginTop: '15%',\n                fontSize: 40\n            }}\n            onClick={onClick}\n        >\n            START QUIZ!\n        </button>\n    </div>\n    \n\n}\n\n\nexport default Start;","import React from 'react';\n\n\nfunction End(props) {\n\n    const { totalTime, numQuestions, startQuestion } = props;\n\n    return (<div>\n        <b>Total time taken:</b> {totalTime}\n        <br></br>\n        <b>Total number of questions answered:</b> {numQuestions}\n        <br></br>\n        <b>Start question:</b> {startQuestion}\n    </div>);\n}\n\nexport default End;","import React from 'react';\n\n\nfunction Question(props) {\n\n    const { question, answers, onClick, isLast, onLastClick } = props;\n\n    return <div>\n        <p>{question}</p>\n\n        {answers.map(answer => <div key={answer}><button onClick={() => { onClick(); if (isLast) { onLastClick(); } }}>{answer}</button></div>)}\n    \n    </div>\n\n}\n\n\nexport default Question;","import React, { useState } from 'react';\nimport Start from './components/Start';\nimport End from './components/End';\nimport Question from './components/Question';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Spinner from 'react-bootstrap/Spinner';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n\n  const [questionNumber, setQuestionNumber] = useState(-1);\n  const [startTime, setStartTime] = useState(new Date());\n  const [endTime, setEndTime] = useState(new Date());\n  const [showQuestion, setShowQuestion] = useState(true);\n  const [done, setDone] = useState(false);\n  const [showSpinner, setShowSpinner] = useState(false);\n  const [startQuestion, _] = useState(Math.floor(2 * Math.random()));\n\n  const questions = [\n    {'question': 'Which of these colors is your favorite?', 'answers': ['Red', 'Blue', 'Green', 'Black']},\n    {'question': 'What type of pet do you want?', 'answers': ['Dog', 'Cat', 'Hamster', 'None']},\n    {'question': 'What is your favorite pattern?', 'answers': ['Polka Dot', 'Striped', 'Floral', 'Solid']},\n    {'question': 'Which show do you like to watch the most?', 'answers': ['Friends', 'The Office', 'Gossip Girl', 'Breaking Bad']},\n    {'question': 'How many siblings do you have?', 'answers': ['0', '1', '2', '3+ ']},\n    {'question': 'Can you drive?', 'answers': ['Yes', 'No', 'I wish ', 'Yes, but poorly']},\n    {'question': 'Are you in a relationship?', 'answers': ['Yes', 'No', \"It's more of a...situationship...\", 'No, but I want to be']},\n    {'question': 'What is your favorite condiment?', 'answers': ['Ketchup', 'Mustard', 'Siracha', 'Plain and simple, please']},\n    {'question': 'What is your favorite subject?', 'answers': ['History', 'Math', 'English', 'Science', 'Sports']},\n    {'question': 'What word would people use to describe you?', 'answers': ['Funny', 'Smart', 'Kind', 'Unique']},\n    {'question': 'How easy is it for your to make decisions?', 'answers': ['First choice, right choice!', 'I like to weigh out the options', 'You choose!']},\n    {'question': 'How timely are you?', 'answers': ['Right on time is LATE!', 'Always right on the money', '5-10 minutes late', '\"I\\'m on my way...\" ']},\n    {'question': 'What role do you play in your friend group?', 'answers': ['Comedian', 'Social Planner / Host', 'Peace-maker', 'umm...idk, a normal role?']},\n    {'question': 'What is your favorite thing to eat?', 'answers': ['Tacos', 'Pizza', 'Something Healthy', 'Ice cream / Dessert']},\n    {'question': 'Do you like to cook?', 'answers': ['Yes', 'No', 'Yes, but I wish I was good at it', 'No, but I wish I did']},\n    {'question': 'Have you been out of the country?', 'answers': ['No', 'Yes, once', 'Yes, multiple times', 'Yes; I was born to travel!']},\n    {'question': 'How many alarms do you set in the morning?', 'answers': [\"None, I'm  a natural early riser!\", 'None, I always sleep in ', '1', '2-3 (snoozing counts)', '4+']},\n    {'question': 'How quickly do you respond to messages?', 'answers': ['Right away', 'Usually within the hour', 'Usually within the day', 'Whenever I remember... ']},\n    {'question': 'What would you buy with lottery money?', 'answers': ['A new car', 'A house/apartment', 'Many 3 course dinners', 'A huge vacation', 'I would save/invest it']},\n    {'question': 'What is your favorite chip flavor?', 'answers': ['Orignal', 'Ruffled', 'Bbq', 'Salt & Vinegar', 'Cheddar']},\n    {'question': 'What is your favorite dip? ', 'answers': ['Ranch', 'Cheese Dip', 'Guac', 'Chocolate', 'Hummus']},\n    {'question': 'How many books have you read since January?', 'answers': ['0', '1', '2-5', '5+']},\n    {'question': 'At what time do you prefer to wake up?', 'answers': ['6:00 AM', 'Between 7:00and 8:00AM ', 'Between 8:00 and 10:00 AM', 'After 10 AM']},\n    {'question': 'What season is your favorite?', 'answers': ['Summer', 'Fall', 'Winter', 'Spring', 'All of them!']},\n    {'question': 'What is your favorite activity?', 'answers': ['Netflix (and chill?) ', 'Eating and Sleeping', 'Hiking/Biking', 'Swimming/Tubing/Water-Skiing']},\n    {'question': 'At what temperature (F) are you most comfortable? ', 'answers': ['60-65 degrees ', '65-70 degrees ', '70-75 degrees ', '75+ degrees ']},\n    {'question': 'What would you carry with you to work every day?', 'answers': ['Purse', 'Backpack', 'Nothing']},\n  ];\n\n  const statements = [\n    'Answer these questions and we will tell you what your future career will be!',\n    'Answer these questions and we will tell you how rich you will be in 15 years!',\n    'Answer these questions and we will tell you what your love life will be like in 5 years!'\n  ];\n\n\n  const totalSeconds = (endTime - startTime) / 1000;\n\n  const minutes = Math.floor(totalSeconds / 60);\n  const seconds = (totalSeconds - minutes * 60);\n  const now = Math.floor(questionNumber * 10000 / questions.length) / 100;\n\n  return (\n    <div className=\"App\">\n      <h1>This Quiz is your Gain</h1>\n\n      {questionNumber === -1 ? <div>      \n        <br></br><br></br>\n        <h2>{statements[startQuestion]}</h2>\n        <Start onClick={() => { setQuestionNumber(questionNumber + 1); setStartTime(new Date()); } }>\n        </Start></div>: null}\n      {questionNumber !== -1 ? <ProgressBar now={now} label={`${now}%`} /> : null }\n      {questionNumber >= 0 && questionNumber < questions.length && showQuestion && !done && !showSpinner ?\n        <div>\n        \n        <Question question={questions[questionNumber].question} answers={questions[questionNumber].answers} isLast={questionNumber + 1 === questions.length} onLastClick={() => setEndTime(new Date())} onClick={\n          () => {\n            setShowSpinner(true);\n            setTimeout(() => {\n              setQuestionNumber(questionNumber + 1);\n              setShowSpinner(false);\n            }, (questionNumber + 1) * 1000)\n        }}>\n        </Question>\n        <br></br>\n        <br></br>\n        <button style={{background: 'red', color: 'white'}} onClick={() => {setDone(true); setEndTime(new Date())}}>Forget it, I quit the quiz</button>\n\n        </div>\n         : null\n      }\n      <br></br>\n\n      {showSpinner ? <Spinner animation=\"border\"></Spinner> : null}\n\n      {\n        questionNumber >= questions.length || done ? <End totalTime={`${minutes} mintues and ${seconds} seconds`} numQuestions={questionNumber} startQuestion={statements[startQuestion]} ></End> : null\n      }\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}